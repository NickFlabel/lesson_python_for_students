1. Базовый Python
Типы данных, логические и арифметические оперции
Циклы, ООП

2. Расширенное ООП
MVC - архитектурный стиль веб-приложений
Паттерны проектирования

3. Django
Создание статических сайтов
Создание динамических сайтов

Итог: Создание полноценного веб-приложения с фротом на JS и бэком на Django


Python - высокоуровневый интерпритируемый язык, самая популярная реализация - CPython
Все, что у нас есть в Python - объект

Два основных метатипа - изменяемые (mutable) и неизменяемые (immutable)

JS - camelCase
Python - snake_case

mutable
list - список
set - множество
dictionary - словарь

immutable
string - строки
integer - целочисленные значения
float - число с плавающей точкой
tuple - коллекция, но неизменяемая
bool - True/False

Plan
1) set and dictionary
2) логические оперции
3) while/for и try/except блоки
4) функции

Plan 19.09
1.1) Рекурсия
1.2) Совместная практическая работу
2) Практическая работа
3) Импорты, модули
6) Лямбда-функции

4) Сортирвка и поиск
5) Регулярные выражения в Python
7) Работа с файлами
8) Генераторы
9) Декораторы

24.09
1) Работа по декораторам, генераторам
2) Основы ООП 
3) Наследование
4) Полиморфизм
5) Особые (dunder/magic) методы
6) Инкапсуляция


30.09
1) Заканчиваем с dunder-методами
2) Множественное наследование
3) property
4) Практические задания


Новый модуль: ООП
01.10
1) Принципы ООП и паттерны проектирования
2) Абстрактные классы и интерфейсы в Python
3) Паттерн "Стратегия"
4) Практическая работа
5) Паттерн "Декоратор"

03.10
1) Декоратор
2) Observer (Наблюдатель)
3) Template

07.10
1) MVC
2) Django - установка, базовые концепции

08.10
1) Связи между моделями
2) URL-параметры
3) Свяжем URL-параметры и модели, чтобы создать простой CRUD
4) Практическая работа
5) Методы моделей

10.10
1) Создадим веб-приложение для бронирования комнат
2) Наследование шаблонов
3) Сложные SQL запросы с использованием Django-ORM
4) Передача GET-параметры
5) Формы

14.10
1) URLs для update и delete
2) Сложные SQL запросы с использованием Django-ORM
3) Передача GET-параметры
4) Формы, не связанные с моделью
5) Контроллеры-классы

15.10
1) Тесты
2) Авторизации и аутентификация (контроллеры-функции)
3) Контроллеры-классы
4) авторизация в контроллерах-классах
5) Сигналы

17.10
1) Контроллеры-классы
2) Авторизация в контроллерах-классах
3) Сигналы
4) Практическая работа
5) Выгрузка файлов пользователями

21.10
1) Middleware
2) Диспетчеры моделей
3) Медиафайлы и их Выгрузка
4) Обработчики контекста, cookies, цифровая подпись
5) Практическая работа

22.10
1) REST
2) Знакомство с Django REST Framework
3) Небольшая практическая Работа
4) Сериализаторы

24.10
1) Сериализаторы
2) Контроллеры-классы
3) Пагинация
4) Запрос с GET-параметрами
5) Частичное обновление

28.10
1) Пагинация
2) Запрос с GET-параметрами
3) Практическая работа
4) View Sets
5) аутентификация и авторизация

29.10
1) ViewSets
2) Аутентификация и авторизация
2.1) Postman
3) Документация
4) Тесты

CSRF - Cross-Site Request Forgery - это уникальный случайно сгенерированный токен для защиты веб-приложения от атак CSRF

KISS - Keep it simple stupid
DRY - Don't repeat yourself

CRUD - CREATE RETRIEVE UPDATE DELETE

Remote Procedure Calls - мы направляли серверу какой-либо тип данных
(например, XML). GET 
get_all_rooms
get_rooms
all_rooms

REST - REpresentational State Transfer. GET/POST/PUT/DELETE
1) Активное использование методов HTTP-протокола
2) Ресурс - все, что мы открываем внешнему миру через наше приложение

URI - универсальный идентификатор ресурса - сочетание ресурса и метода
rooms/ - url ресурса
GET rooms/ - uri для получения всех комнат
POST rooms/ - uri для создания комнат

HTTP метод + url ресурса - интерфейс REST API

Принципы REST:
1) Единый интерфейс
2) Клиент-серверная архитектура
3) Stateless Request (Нестационарные запросы) - каждый HTTP-запрос полностью изолирован.
Сервер не полагается на информацию из предыдущих запросов - клиент отправляет HTTP-зарос, 
который сразу включает всю необходимую для сервера информацию. 
4) Кэшируемость
5) Многоуровневость системы - слои
6) Предоставление кода по запросу
7) Начало от нуля - клиент занет только одну точку входа на сервер


pip install djangorestframework
pip install djangorestframework-simplejwt - поддержка JWT

JWT (JSON Web Token) - открытый стандарт, который определяет комкатный и автономный способ безопасной
передачи информации двумя сторонами

Токен внутри запроса направляется при помощи заголовка Authentication: Bearer <токен>

Django REST Framework (DRF):
Структура приложения будет такая же как в случае с обычным Django, но
у нас будут отсутствовать Templates. Вместо Templates за репрезентацию данных
будут отвечать сериализаторы


Валидация и строгие типы в Python - Pydantic
class ...(BaseModel):
    a: int


Приниципы SOLID:
1) Single Responsibility Principle - сущность должна иметь только одну причину для изменения
2) Open/Close Principle 
3) Barbara Liskov's Substitution Principle
4) Interface Segregation Principle
5) Dependency Inversion Principle
