1. Базовый Python
Типы данных, логические и арифметические оперции
Циклы, ООП

2. Расширенное ООП
MVC - архитектурный стиль веб-приложений
Паттерны проектирования

3. Django
Создание статических сайтов
Создание динамических сайтов

Итог: Создание полноценного веб-приложения с фротом на JS и бэком на Django


Python - высокоуровневый интерпритируемый язык, самая популярная реализация - CPython
Все, что у нас есть в Python - объект

Два основных метатипа - изменяемые (mutable) и неизменяемые (immutable)

JS - camelCase
Python - snake_case

mutable
list - список
set - множество
dictionary - словарь

immutable
string - строки
integer - целочисленные значения
float - число с плавающей точкой
tuple - коллекция, но неизменяемая
bool - True/False

Plan
1) set and dictionary
2) логические оперции
3) while/for и try/except блоки
4) функции

Plan 19.09
1.1) Рекурсия
1.2) Совместная практическая работу
2) Практическая работа
3) Импорты, модули
6) Лямбда-функции

4) Сортирвка и поиск
5) Регулярные выражения в Python
7) Работа с файлами
8) Генераторы
9) Декораторы

24.09
1) Работа по декораторам, генераторам
2) Основы ООП 
3) Наследование
4) Полиморфизм
5) Особые (dunder/magic) методы
6) Инкапсуляция


30.09
1) Заканчиваем с dunder-методами
2) Множественное наследование
3) property
4) Практические задания


Новый модуль: ООП
01.10
1) Принципы ООП и паттерны проектирования
2) Абстрактные классы и интерфейсы в Python
3) Паттерн "Стратегия"
4) Практическая работа
5) Паттерн "Декоратор"

03.10
1) Декоратор
2) Observer (Наблюдатель)
3) Template

07.10
1) MVC
2) Django - установка, базовые концепции

08.10
1) Связи между моделями
2) URL-параметры
3) Свяжем URL-параметры и модели, чтобы создать простой CRUD
4) Практическая работа
5) Методы моделей

10.10
1) Создадим веб-приложение для бронирования комнат
2) Наследование шаблонов
3) Сложные SQL запросы с использованием Django-ORM
4) Передача GET-параметры
5) Формы

14.10
1) URLs для update и delete
2) Сложные SQL запросы с использованием Django-ORM
3) Передача GET-параметры
4) Формы, не связанные с моделью
5) Контроллеры-классы

15.10
1) Тесты
2) Авторизации и аутентификация (контроллеры-функции)
3) Контроллеры-классы
4) авторизация в контроллерах-классах
5) Сигналы

17.10
1) Контроллеры-классы
2) Авторизация в контроллерах-классах
3) Сигналы
4) Практическая работа
5) Выгрузка файлов пользователями

21.10
1) Middleware
2) Диспетчеры моделей
3) Медиафайлы и их Выгрузка
4) Обработчики контекста, cookies, цифровая подпись
5) Практическая работа

22.10
1) REST
2) Знакомство с Django REST Framework
3) Небольшая практическая Работа
4) Сериализаторы

24.10
1) Сериализаторы
2) Контроллеры-классы
3) Пагинация
4) Запрос с GET-параметрами
5) Частичное обновление

28.10
1) Пагинация
2) Запрос с GET-параметрами
3) Практическая работа
4) View Sets
5) аутентификация и авторизация

29.10
1) ViewSets
2) Аутентификация и авторизация
2.1) Postman
3) Документация
4) Тесты

31.10
1) Логирование
2) Тесты
3) Email
4) Практическая работа
5) Подготовка проекта к публикации

04.11
1) Email
2) Подготовка проекта к публикации
3) Итоговая практическая работа

07.11
1) Экзамен
2) Docker
3) Отдельные контейнеры
4) Составные приложения
5) Кэширование в django + redis
6) Celery - библиотека для громоздких асинхронных задач

11.11
1) docker-compose

12.11
1) Celery
2) Nginx
3) Makefile
4) Асинхронное программирование в Python

14.11
1) Использование библиотеки asyncio
2) Асинхронные веб-фреймворки в python

Экзамен:
1) Устная часть - 6 баллов
2) Практическая часть - 6 баллов

CSRF - Cross-Site Request Forgery - это уникальный случайно сгенерированный токен для защиты веб-приложения от атак CSRF

KISS - Keep it simple stupid
DRY - Don't repeat yourself

CRUD - CREATE RETRIEVE UPDATE DELETE

Remote Procedure Calls - мы направляли серверу какой-либо тип данных
(например, XML). GET 
get_all_rooms
get_rooms
all_rooms

REST - REpresentational State Transfer. GET/POST/PUT/DELETE
1) Активное использование методов HTTP-протокола
2) Ресурс - все, что мы открываем внешнему миру через наше приложение

URI - универсальный идентификатор ресурса - сочетание ресурса и метода
rooms/ - url ресурса
GET rooms/ - uri для получения всех комнат
POST rooms/ - uri для создания комнат

HTTP метод + url ресурса - интерфейс REST API

Принципы REST:
1) Единый интерфейс
2) Клиент-серверная архитектура
3) Stateless Request (Нестационарные запросы) - каждый HTTP-запрос полностью изолирован.
Сервер не полагается на информацию из предыдущих запросов - клиент отправляет HTTP-зарос, 
который сразу включает всю необходимую для сервера информацию. 
4) Кэшируемость
5) Многоуровневость системы - слои
6) Предоставление кода по запросу
7) Начало от нуля - клиент занет только одну точку входа на сервер


pip install djangorestframework
pip install djangorestframework-simplejwt - поддержка JWT
pip install drf-yasg - библиотека для автоматической генерации Swagger-документации
pip install python-dotenv - для использования в проекте .env файла
python .\manage.py collectstatic - собирает все статические файлы из библиотек проекта
pip install whitenoise - обработка статический файлов без специального сервера
pip install psycopg2 - драйвер для работы с Postgresql
pip install gunicorn - сервер для production environment (unix-системы)
pip install uvicorn - асинхронный сервер для production environment

uvicorn lesson_project.asgi:application --host 0.0.0.0 --port 8000 - команда для запуска production-сервера

JWT (JSON Web Token) - открытый стандарт, который определяет комкатный и автономный способ безопасной
передачи информации двумя сторонами

Токен внутри запроса направляется при помощи заголовка Authentication: Bearer <токен>

Django REST Framework (DRF):
Структура приложения будет такая же как в случае с обычным Django, но
у нас будут отсутствовать Templates. Вместо Templates за репрезентацию данных
будут отвечать сериализаторы


Валидация и строгие типы в Python - Pydantic
class ...(BaseModel):
    a: int


Приниципы SOLID:
1) Single Responsibility Principle - сущность должна иметь только одну причину для изменения
2) Open/Close Principle 
3) Barbara Liskov's Substitution Principle
4) Interface Segregation Principle
5) Dependency Inversion Principle

docker-compose - инструмент для управления многоконтейрными приложениями в Docker
С его помощью можно одновремнно запускать несколько контейнеров, определять их
зависимости, настравать взаимодействие между ними в едином конфигурационеном файле
(docker-compose.yml)

docker-compose up --build - запуск многоконтейнерного приложения через docker-compose
pip install psycopg2-binary - версия psycopg, которая установится на Debian

В docker-compose сети позволяют контейнерам безопасно общаться друг с другом,
изолируя их от внешнего окружения или от других сетей. Созадавая сети, 
можно управлять связанностью контейнеров, доступом к ним и ограничивать взаимодействия

Redis - хранилище данных в памяти, которое поддерживает ключ-значение структуру. 
Этот инструмент популярен благодоря своей выскорой скороти и применяся для кэширования,
управления сессиями, очередей сообщений, аналитики в реальном времени и других задач.

Redis поддерживает следующие структуры данных:
строки, списки, множества, хэш-таблицы -> Нужна сериализация перед отправкой в Redis

Команды REDIS:

GET <ключ> - получает значение по ключу
SET <ключ> <значение> - создает новую пару ключ-значение
EXPIRE <ключ> <время жизни в секундах> - задает время жизни пары

Кэширование в django:
pip install django-redis - библиотека для кэширования в redis

Celery
Это асинхронная очередь задач, которая используется для выполнения
фоновых задач в Django и других приложениях Python. 

pip install celery

Celery:
- Worker - отдельный процесс, который принимает и выполняет задачи
- Broker - отвечает за передачу сообщений между клиентом и воркерами (Обычно это Redis или RabbitMQ)
- Backend - место, где хранятся результаты выполнения задач 
- Beat - периодический планировщик для периодического выполнения задач

celery-beat
pip install django-celery-beat

Эта библиотека нужна для исполнения периодических задач
При помощи модуля django_celery_beat.models.CrontabSchedule можем задавать 
периодичность выполнения каких-либо задач

Flower - способ отслеживать задачи и результат их выполнения
pip install Flower
celery -A <название проекта> flower 
Предоставляет веб-интерфейс для управления celery-задачаму


Makefile - файл, используемый для автоматизации повторяющихся задач в проекте
- Targets - каждая из которых представляет собой определенное действие или набор команда
- Зависимости 

<target>: <зависимости>
    <команды>


Nginx - веб-сервер с открытым исходным кодом, который также может работаьть как load balancer и кэщ
Он используется для обраюотки HTTP-запросов, распределения нагрузки на серверы и улучшения производительности

events { # Используется для настройки обработки соединений
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;

    upstream django_app {
        server django_1;
        server django_2;
    }

    server {
        listen 80;
        server_name localhost;

        location /static/ { # локация для кэширования данных 
            alias /path/to/static/files;
            expires 30d;
        }

        location / {
            proxy_pass http://django:8000;
            proxy_set_header Host $host;
        }
    }
}

Асинхронное программирование
cpu-bound задачи - задачи, которые требуют работы процессора
i/o-bound задачи - задачи, которые требуют выполния input/output-операций

GIL - Global Interpreter Lock - неотъемлемая часть python, которая не позволяет одновременно 
выполнять больше одной cpu-bound задачи в рамках одного процесса

race condition

Многопроцессорность в Python реализуется при помощи модуля multiprocessing

Для обеспечения асинхронности в Python у нас есть библиотека asyncio

Asyncio:
- Корутины - асинхронные функции, которые определяются с помощью async def и могут быть приостановлены
(await) для выполнения других задач
- Цикл событий - Цегьо управления, который планирует и запускает Корутины
- Задачи - специальные объекты, которые управляют выполнением Корутины
- Futures - запланированный результат асинхронных операций, который можно ожидать с помощью await

asyncio.create_task - превращает корутину в задачу, прокидывая ее в цикл событий
asyncio.run - запускает цикл событий
asyncio.gather - запускает несколько корутин и позволяет получить результаты выполнения
всех задач сразу. Он собирает результаты в том порядке, в котором они были переданы
и возвращает их в виде списка
asyncio.TaskGroup() - асинхронный менеджер контекста, который позволяет автоматически
выполнить начатые внутри него задачи

gather лучше использовать для независимых задач
TaskGroup - для управления связанной группой задач с единым контекстом


pip install aiohttp - библиотека для асинхронных HTTP запросов

aiohttp.ClientSession() - создает клиент-сессию для создания запросов
session.get/post/put/... - неблокирующий вызов, который не блокирует тред
и позволяет обрабатывать другие задачи во время ожидания отвечат

Жизненный цикл задачи
done() -> bool - True если задача завершена и наоборрот
result() - возвращает return функции-Корутины
exception() - возвращает исключение, если задача завершилась с ошибкой или None если ошибок не было
cancel() - отменяет выполнение задачи

Блокировки и семафоры позволяют координировать доступ к общим ресурсам несколькими задачами, чтобы
избежать конфликтов и ошибок

блокировка - asyncio.Lock

семафор - asyncio.Semaphore(<количество>)

FastAPI - асинхронный веб-фреймворк, который отличается выской скоростью и удобством использования

pip install fastapi

pydantic 
Библиотека для валидации и сериазицаии данных

1) Object Design Style Guide - Matthias Nobak
2) Clean Code
3) Clean Coder
4) Unit Testing - Vladimir Khorikov
5) Design Patterns - Gang of Four
6) Head First Design Patterns - Эрик Фримен, Элизабет Роброн
7) Python Concurrency with asyncio - Мэтью Фаулер
8) Clean Architecture - Uncle Bob


